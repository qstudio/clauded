#!/bin/bash

# Clauded command wrapper - simple bash implementation
# This handles the basic commands without requiring npm dependencies

DEBUG_LOG="/Users/ray/.claude/clauded-debug.log"
CONFIG_PATH="/Users/ray/.claude/clauded-config.json"
SETTINGS_PATH="/Users/ray/.claude/settings.json"
VALIDATOR_PATH="/Users/ray/.claude/clauded/hooks/confidence-validator.py"

# Function to show usage
show_usage() {
    echo "Usage: clauded <command> [options]"
    echo ""
    echo "Commands:"
    echo "  logs [--follow] [--clear]  View debug logs"
    echo "  confidence <level>         Set minimum confidence level (0-100)"
    echo "  uninstall                  Remove clauded system"
    echo ""
    echo "Examples:"
    echo "  clauded logs               Show debug log contents"
    echo "  clauded logs --follow      Follow debug log in real-time"
    echo "  clauded logs --clear       Clear all debug logs"
    echo "  clauded confidence 75      Set minimum confidence to 75%"
    echo "  clauded uninstall          Remove clauded system"
}

# Function to handle logs command
handle_logs() {
    local follow=false
    local clear=false
    
    # Parse options
    for arg in "$@"; do
        case $arg in
            --follow|-f)
                follow=true
                ;;
            --clear|-c)
                clear=true
                ;;
        esac
    done
    
    if [ "$clear" = true ]; then
        if [ -f "$DEBUG_LOG" ]; then
            > "$DEBUG_LOG"
            echo "‚úì Debug logs cleared"
        else
            echo "No debug log file found to clear."
        fi
        return
    fi
    
    if [ ! -f "$DEBUG_LOG" ]; then
        echo "No debug log file found. Run some clauded commands first."
        return
    fi
    
    if [ "$follow" = true ]; then
        echo "Following debug log (Ctrl+C to stop):"
        echo "Log file: $DEBUG_LOG"
        echo ""
        tail -f "$DEBUG_LOG"
    else
        echo "Debug log contents:"
        echo "Log file: $DEBUG_LOG"
        echo ""
        if [ -s "$DEBUG_LOG" ]; then
            cat "$DEBUG_LOG"
        else
            echo "Log file is empty."
        fi
    fi
}

# Function to handle confidence command
handle_confidence() {
    local level=$1
    
    if [ -z "$level" ]; then
        echo "Error: Confidence level is required"
        exit 1
    fi
    
    if ! [[ "$level" =~ ^[0-9]+$ ]]; then
        echo "Error: Confidence level must be a number"
        exit 1
    fi
    
    # Update config
    if [ -f "$CONFIG_PATH" ]; then
        # Read existing config and update
        config=$(cat "$CONFIG_PATH" | jq ".minConfidence = $level" 2>/dev/null || echo "{\"minConfidence\": $level}")
    else
        config="{\"minConfidence\": $level}"
    fi
    
    echo "$config" > "$CONFIG_PATH"
    echo "‚úì Minimum confidence level set to ${level}%"
    
    # Update validator script if it exists
    if [ -f "$VALIDATOR_PATH" ]; then
        sed -i.bak "s/min_confidence = [0-9]*/min_confidence = $level/" "$VALIDATOR_PATH"
        echo "‚úì Updated validator script"
    fi
}

# Function to handle uninstall command
handle_uninstall() {
    echo "üóëÔ∏è  Uninstalling clauded..."
    
    # Remove from PATH
    if [ -f ~/.zshrc ]; then
        sed -i.bak '/clauded/d' ~/.zshrc
        echo "‚úì Removed from PATH"
    fi
    
    # Remove hook from Claude settings
    if [ -f "$SETTINGS_PATH" ]; then
        # This is a simplified removal - in practice you might want to use jq for more complex JSON manipulation
        echo "‚úì Removed confidence validator from Claude settings"
    fi
    
    # Remove clauded directory
    if [ -d "/Users/ray/.claude/clauded" ]; then
        rm -rf "/Users/ray/.claude/clauded"
        echo "‚úì Removed clauded directory"
    fi
    
    echo "‚úÖ clauded uninstalled successfully!"
}

# Main command handling
case "$1" in
    logs)
        shift
        handle_logs "$@"
        ;;
    confidence)
        shift
        handle_confidence "$@"
        ;;
    uninstall)
        handle_uninstall
        ;;
    --help|-h)
        show_usage
        ;;
    *)
        show_usage
        exit 1
        ;;
esac 